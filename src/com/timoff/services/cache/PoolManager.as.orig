/**
 * Author: Vasily Timofeev
 * Web: http://timoff.com
 */
package com.timoff.services.cache {

import flash.display.Bitmap;
import flash.display.MovieClip;
import flash.display.Shape;
import flash.display.Sprite;
import flash.events.TimerEvent;
import flash.utils.Dictionary;
import flash.utils.Timer;
import flash.utils.getQualifiedClassName;
import flash.utils.getTimer;

public class PoolManager {
    public static const DEFAULT_EXCLUDED:Array = [Shape, Sprite,  MovieClip, Bitmap];
    public static var DEFAULT_LIFETIME:int = 300;
    public static var DEFAULT_GC_TIME:int =  120;

    private static var __instance:PoolManager;
    private var _excludedClasses:Array;
    private var storage:Dictionary;
    private var gcTimer:Timer;
    private var getCounter:int = 0;
    private var addCounter:int = 0;
    private var gcCounter:int = 0;

    public function PoolManager(enableTimer:Boolean = true, excludedClasses:Array = null) {
        _excludedClasses = excludedClasses?excludedClasses:DEFAULT_EXCLUDED;
        gcTimer = new Timer(DEFAULT_GC_TIME*1000);
        gcTimer.addEventListener(TimerEvent.TIMER, gcHandler, false, 1, true);
    }

    public function set excludedClasses(value:Array):void
    {
        _excludedClasses = value;
    }

    /*
        Add instance to pool.
        You can set a class name, life time object in seconds.
    */
    public function addInstance(value:Object, className:String = null, timeInStorage:uint = -1):Boolean
    {
        if(!value) return false;
        if(timeInStorage < 0) timeInStorage = DEFAULT_LIFETIME;

        const proto:Class = value.constructor as Class;
        const name:String = className ? className : getQualifiedClassName(value);

        if(proto in _excludedClasses) return false;

        const namedStorage:Array = storage[name]?storage[name]:storage[name] = [];
        const poolValueObject:PoolValueObject = new PoolValueObject(value, timeInStorage, getTimer()/1000 );
        namedStorage.push(value);
        addCounter++;
        return true;
    }

    /*
        Get instance from pool.
        You can get instance from pool use class name or your specific name.
    */
    public function getInstance(className:String):*
    {
        const nameStorage:Array = storage[className]?storage[className]:storage[className] = [];
        if (nameStorage.length)
        {
            const item:PoolValueObject = nameStorage.pop();
            const object:Object = item.object;
            item.free();

            getCounter++;
            return object;
        }
        else
        {
            return null;
        }
    }

    /*
        Clean cache by timer and cache lifetime.
    */
    private function gcHandler(event:TimerEvent):void {
        const currentTime:Number = getTimer()/1000;
        var arrayPoolObjects:Array;
        var item:PoolValueObject;
        var i:int = 0;

        for each(arrayPoolObjects in storage) {
            if (!arrayPoolObjects) continue;
            if (!arrayPoolObjects.length) continue;
            i = 0;
            for each(item in arrayPoolObjects) {
                if ((currentTime - item.creationTime) > item.lifeTime ? item.lifeTime : DEFAULT_LIFETIME) {
                    item = arrayPoolObjects.splice(i, 1);
                    item.free();
                }
                else {
                    i++;
                }
            }
        }

        gcCounter++;
    }

    // -----------------------------------------------------------------
    // Static methods
    // -----------------------------------------------------------------

    public static function get instance():PoolManager {
        return __instance ? __instance : __instance = new PoolManager();
    }
}
}
internal class PoolValueObject {

    public var object:Object;
    public var lifeTime:Number = 0;
    public var creationTime:Number = 0;

    public function PoolValueObject(object:Object, lifeTime:Number, creationTime:Number) {
        this.object = object;
        this.lifeTime = lifeTime;
        this.creationTime = creationTime;
    }

    public function free():void {
        object = null;
    }
}
